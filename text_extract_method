#!/usr/bin/env ruby

# Method to extract code to a new method
def extract_method(file_path, code_snippet, start_line_number)
  # Read the file content
  content = File.read(file_path)
  lines = content.split("\n")
  p "lines: #{lines.length}"

  # Find the function boundary
  def_line = nil
  end_line = nil
  indent_level = nil

  # Search upward for the enclosing method definition
  (start_line_number - 1).downto(0) do |i|
    if lines[i] =~ /^\s*def\s+/
      def_line = i
      indent_level = lines[i].match(/^(\s*)/)[1].length
      break
    end
  end

  return "Cannot find enclosing method" unless def_line

  # Find the end of the enclosing method by tracking nesting level
  ((def_line + 1)..lines.length - 1).each do |i|
    line = lines[i]
    next unless line.include?('end') && line.strip == 'end' && line.match(/^(\s*)/)[1].length == indent_level

    end_line = i + 1
    break
  end

  return "Cannot find method end" unless end_line

  # Check if it's a class method
  is_class_method = lines[def_line].include?('self.')

  # Get user input for new method name with clear prompt
  STDOUT.print "Enter new method name: "
  STDOUT.flush  # Ensure prompt is displayed
  new_method_name = STDIN.gets.chomp
  while new_method_name.empty?
    STDOUT.print "Method name cannot be empty. Enter new method name: "
    STDOUT.flush
    new_method_name = STDIN.gets.chomp
  end

  # Create the new method
  new_method = if is_class_method
                 "\n#{' ' * indent_level}def self.#{new_method_name}\n"
               else
                 "\n#{' ' * indent_level}def #{new_method_name}\n"
               end

  # Add the code snippet with proper indentation
  code_snippet.split("\n").each do |line|
    new_method += "#{' ' * (indent_level + 2)}#{line.strip}\n"
  end

  new_method += "#{' ' * indent_level}end\n"

  # Insert the new method before the end of the current method
  lines.insert(end_line, new_method)

  # Write back to file
  File.write(file_path, lines.join("\n"))
end

# When run directly from command line
if __FILE__ == $0
  if ARGV.length != 3
    puts "Usage: #{$0} file_path line_number \"code_snippet\""
    puts "Example: #{$0} my_file.rb 10 \"puts 'hello world'\""
    exit 1
  end

  file_path = ARGV[0]
  line_number = ARGV[1].to_i
  code_snippet = ARGV[2]

  unless File.exist?(file_path)
    puts "File not found: #{file_path}"
    exit 1
  end

  result = extract_method(file_path, code_snippet, line_number)
  puts result
end
